// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    /** Initializes the library. */
    function void init() {
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x<0){
            return -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum;
        var int shiftedX;
        var int i;

        let shiftedX=x;
        let sum=0;
        let i=0;
        
        while(i<16){
            if((y&1)=1){
                let sum=sum+shiftedX;
            }
            let shiftedX=shiftedX<<1;
            let y=y<<1;
            let i=i+1;
        }

        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int result;
        var int power;
        var int yShifted;

        let result=0;
        let power=0;
        let yShifted=y;

        while(yShifted<=x){
            let yShifted=yShifted<<1;
            let power=power+1;
        }

        while(power>0){
            let yShifted=yShifted>>1;
            let power=power-1;

            if(x>=yShifted){
                let x=x-yShifted;
                let result=result+(1<<power);
            }
        }

        return result;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int guess;
        let guess=0;

        while((guess*guess)<=x){
            let guess=guess+1;
        }
        return guess-1;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if(a>b){
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if(a<b){
            return a;
        }
        return b;
    }
}
