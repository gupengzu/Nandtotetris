// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array chars;
    field int length;
    field int maxLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let chars=Array.new(maxLength);
        let length=0;
        let this.maxLength=maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do chars.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let char[j]=c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(length<maxLength){
            let chars[length]=c;
            let length=length+1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(length<maxLength){
            let length=length-1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i,result,digit;
        let i=0;
        let result=0;

        while(i<length){
            let digit=chars[i]-48;
            if((digit<0)|(digit>9)){
                return result;
            }
            let result=result*10+digit;
            let i+i+1;
        }
        return result;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int i,digit;
        let i=0;

        if(val==0){
            do this.appendChar(48);
            return;
        }

        if(val<0){
            do this.appendChar(45);
            let val=-val;
        }

        while(val>0){
            let digit=val%10;
            let chars[i]=digit+48;
            let val=val/10;
            let i=i+1;
        }

        //反转字符数组
        var int start,end,temp;
        let start=0;
        let end=i-1;
        while(start<end){
            let temp=chars[start];
            let chars[start]=chars[end];
            let chars[end]=temp;
            let start=start+1;
            let end=end-1;
        }

        let length=i;
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;//换行符的特殊值
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;//退格键的特殊值
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;//双引号的ASCII值
    }
}
