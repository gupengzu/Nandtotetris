// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static boolean currentColor;//当前颜色，true 表示黑色，false 表示白色
    /** Initializes the Screen. */
    function void init() {
        do Screen.clearScreen();//初始化时清空屏幕
        let currentColor=false;//默认颜色设置为白色
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int address;
        let address=16384;//Hack屏幕的起始地址

        while(address<24576){//Hack屏幕占用8192个16位字
            do Memory.poke(address,0);//将每个屏幕字设置为0（清空屏幕为白色）
            let address=address+1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let currentColor=b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address;
        var int bit;

        let address=16384+(y*32)+(x/16);//计算像素所在的屏幕字地址
        let bit=x%16;//计算像素在屏幕字中的位置

        if(currentColor){
            //设置像素为黑色
            do Memory.poke(address,Memory.peek(address)|(1<<(15-bit)));
        }else{
            //设置像素为白色
            do Memory.poke(address, Memory.peek(address) & ~(1 << (15 - bit)));
        }
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
    var int dx, dy, stepX, stepY, fraction, x, y;

    // 如果 x1 > x2，交换起点和终点
    if (x1 > x2) {
        var int temp;
        let temp = x1;
        let x1 = x2;
        let x2 = temp;

        let temp = y1;
        let y1 = y2;
        let y2 = temp;
    }

    let dx = x2 - x1; // x 方向的增量
    let dy = y2 - y1; // y 方向的增量

    // 确定 x 和 y 的步长
    if (dy < 0) {
        let dy = -dy;
        let stepY = -1;
    } else {
        let stepY = 1;
    }

    let stepX = 1; // x 总是向右递增

    // 初始化起点
    let x = x1;
    let y = y1;

    // 如果是水平线
    if (dy == 0) {
        do Screen.drawHLine(x1, x2, y1);
        return;
    }

    // 如果是垂直线
    if (dx == 0) {
        do Screen.drawVLine(x1, y1, y2);
        return;
    }

    // 使用 Bresenham 算法绘制直线
    if (dx >= dy) {
        // dx > dy 的情况
        let fraction = 2 * dy - dx;
        while (x <= x2) {
            do Screen.drawPixel(x, y);
            if (fraction >= 0) {
                let y = y + stepY;
                let fraction = fraction - 2 * dx;
            }
            let x = x + stepX;
            let fraction = fraction + 2 * dy;
        }
    } else {
        // dy > dx 的情况
        let fraction = 2 * dx - dy;
        while (y != y2) {
            do Screen.drawPixel(x, y);
            if (fraction >= 0) {
                let x = x + stepX;
                let fraction = fraction - 2 * dy;
            }
            let y = y + stepY;
            let fraction = fraction + 2 * dx;
        }
    }

    return;
}

    //draw horizontal line
    function void drawHLine(int x1, int x2, int y){
        var int temp;

        if(x1 > x2){
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
        }

        while(~(x2 < x1)){
            do Screen.drawPixel(x1,y);
            let x1 = x1 + 1;
        }

        return;
    }
    //draw vertical line
    function void drawVLine(int x, int y1, int y2){
        var int temp;

        if(y1 > y2){
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }

        while(~(y2 < y1)){
            do Screen.drawPixel(x,y1);
            let y1 = y1 + 1;
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
            // 确保 x1, x2 和 y1, y2 的顺序正确
    if (x1 > x2) {
        var int temp;
        let temp = x1;
        let x1 = x2;
        let x2 = temp;
    }

    if (y1 > y2) {
        var int temp;
        let temp = y1;
        let y1 = y2;
        let y2 = temp;
    }

    // 从 y1 到 y2，每一行画一条水平线
    let y = y1;
    while (y <= y2) {
        do Screen.drawHLine(x1, x2, y); // 调用 drawHLine 方法画水平线
        let y = y + 1;
    }

    return;
}
    

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
            // 初始化变量
    let dx = 0;
    let dy = r;
    let d = 1 - r;

    // 使用对称性绘制圆
    while (dx <= dy) {
        // 绘制对称的八个点
        do Screen.drawPixel(x + dx, y + dy);
        do Screen.drawPixel(x + dx, y - dy);
        do Screen.drawPixel(x - dx, y + dy);
        do Screen.drawPixel(x - dx, y - dy);
        do Screen.drawPixel(x + dy, y + dx);
        do Screen.drawPixel(x + dy, y - dx);
        do Screen.drawPixel(x - dy, y + dx);
        do Screen.drawPixel(x - dy, y - dx);

        // 更新决策参数 d 和坐标
        if (d < 0) {
            let d = d + (2 * dx) + 3;
        } else {
            let d = d + (2 * (dx - dy)) + 5;
            let dy = dy - 1;
        }
        let dx = dx + 1;
    }

    return;
    }
}
